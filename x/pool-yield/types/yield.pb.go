// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/pool-yield/v1beta1/yield.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DistrPool struct {
	PotId string `protobuf:"bytes,1,opt,name=pot_id,json=potId,proto3" json:"pot_id,omitempty" yaml:"pot_id"`
	// Denormarized weight.
	Weight github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"weight" yaml:"denormalized_weight"`
}

func (m *DistrPool) Reset()         { *m = DistrPool{} }
func (m *DistrPool) String() string { return proto.CompactTextString(m) }
func (*DistrPool) ProtoMessage()    {}
func (*DistrPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b628395712b609, []int{0}
}
func (m *DistrPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistrPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistrPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistrPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistrPool.Merge(m, src)
}
func (m *DistrPool) XXX_Size() int {
	return m.Size()
}
func (m *DistrPool) XXX_DiscardUnknown() {
	xxx_messageInfo_DistrPool.DiscardUnknown(m)
}

var xxx_messageInfo_DistrPool proto.InternalMessageInfo

func (m *DistrPool) GetPotId() string {
	if m != nil {
		return m.PotId
	}
	return ""
}

type PoolYield struct {
	DistributePools []DistrPool                            `protobuf:"bytes,1,rep,name=distribute_pools,json=distributePools,proto3" json:"distribute_pools"`
	TotalWeight     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=total_weight,json=totalWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_weight" yaml:"total_weight"`
}

func (m *PoolYield) Reset()         { *m = PoolYield{} }
func (m *PoolYield) String() string { return proto.CompactTextString(m) }
func (*PoolYield) ProtoMessage()    {}
func (*PoolYield) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b628395712b609, []int{1}
}
func (m *PoolYield) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolYield) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolYield.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolYield) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolYield.Merge(m, src)
}
func (m *PoolYield) XXX_Size() int {
	return m.Size()
}
func (m *PoolYield) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolYield.DiscardUnknown(m)
}

var xxx_messageInfo_PoolYield proto.InternalMessageInfo

func (m *PoolYield) GetDistributePools() []DistrPool {
	if m != nil {
		return m.DistributePools
	}
	return nil
}

// Params defines the parameters for the bank module.
type Params struct {
	MintDenom         string          `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	LockableDurations []time.Duration `protobuf:"bytes,2,rep,name=lockable_durations,json=lockableDurations,proto3,stdduration" json:"lockable_durations" yaml:"lockable_durations"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4b628395712b609, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *Params) GetLockableDurations() []time.Duration {
	if m != nil {
		return m.LockableDurations
	}
	return nil
}

func init() {
	proto.RegisterType((*DistrPool)(nil), "osmosis.poolyield.v1beta1.DistrPool")
	proto.RegisterType((*PoolYield)(nil), "osmosis.poolyield.v1beta1.PoolYield")
	proto.RegisterType((*Params)(nil), "osmosis.poolyield.v1beta1.Params")
}

func init() {
	proto.RegisterFile("osmosis/pool-yield/v1beta1/yield.proto", fileDescriptor_f4b628395712b609)
}

var fileDescriptor_f4b628395712b609 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0x9e, 0xac, 0x6b, 0xa1, 0x59, 0x45, 0x77, 0xf4, 0xd0, 0x16, 0x9c, 0x59, 0x06, 0x5d, 0x7a,
	0x69, 0xc2, 0xea, 0x6d, 0x8f, 0xa5, 0x1e, 0x0a, 0x1e, 0x96, 0x01, 0x11, 0xbd, 0x0c, 0x33, 0x4d,
	0x9c, 0x86, 0xcd, 0xf4, 0x0d, 0x93, 0x54, 0xad, 0xbf, 0xc2, 0xe3, 0x82, 0x20, 0xfe, 0x9c, 0x3d,
	0x78, 0xe8, 0x51, 0x3c, 0x8c, 0xd2, 0xfe, 0x83, 0xfe, 0x02, 0x49, 0x32, 0xa3, 0x15, 0xf1, 0xe0,
	0x29, 0x79, 0xef, 0x7d, 0xf9, 0xf8, 0xbe, 0xef, 0x05, 0x9f, 0x82, 0x2a, 0x40, 0x09, 0x45, 0x4b,
	0x00, 0x39, 0x5a, 0x09, 0x2e, 0x19, 0x7d, 0x73, 0x96, 0x71, 0x9d, 0x9e, 0x51, 0x5b, 0x91, 0xb2,
	0x02, 0x0d, 0x7e, 0xbf, 0xc1, 0x11, 0x83, 0x73, 0x83, 0x06, 0x36, 0xb8, 0x9f, 0x43, 0x0e, 0x16,
	0x45, 0xcd, 0xcd, 0x3d, 0x18, 0x04, 0x39, 0x40, 0x2e, 0x39, 0xb5, 0x55, 0xb6, 0x7c, 0x4d, 0xd9,
	0xb2, 0x4a, 0xb5, 0x80, 0x85, 0x9b, 0x47, 0x1f, 0x11, 0xee, 0x4e, 0x84, 0xd2, 0xd5, 0x05, 0x80,
	0xf4, 0x87, 0xb8, 0x53, 0x82, 0x4e, 0x04, 0xeb, 0xa1, 0x13, 0x34, 0xec, 0x8e, 0x8f, 0x77, 0x75,
	0x78, 0x7b, 0x95, 0x16, 0xf2, 0x3c, 0x72, 0xfd, 0x28, 0xbe, 0x59, 0x82, 0x9e, 0x32, 0x9f, 0xe1,
	0xce, 0x5b, 0x2e, 0xf2, 0xb9, 0xee, 0x1d, 0x58, 0xe4, 0xb3, 0xeb, 0x3a, 0xf4, 0xbe, 0xd5, 0xe1,
	0x69, 0x2e, 0xf4, 0x7c, 0x99, 0x91, 0x19, 0x14, 0x74, 0x66, 0xc5, 0x36, 0xc7, 0x48, 0xb1, 0x4b,
	0xaa, 0x57, 0x25, 0x57, 0x64, 0xba, 0xd0, 0xbb, 0x3a, 0x1c, 0x38, 0x5e, 0xc6, 0x17, 0x50, 0x15,
	0xa9, 0x14, 0xef, 0x39, 0x4b, 0x1c, 0x65, 0x14, 0x37, 0xdc, 0xd1, 0x17, 0x84, 0xbb, 0x46, 0xd8,
	0x4b, 0xe3, 0xd4, 0x7f, 0x8e, 0xef, 0x32, 0x23, 0x55, 0x64, 0x4b, 0xcd, 0x13, 0x93, 0x80, 0xea,
	0xa1, 0x93, 0x1b, 0xc3, 0xa3, 0xc7, 0x0f, 0xc9, 0x3f, 0x73, 0x21, 0xbf, 0xdc, 0x8d, 0x0f, 0x8d,
	0xc6, 0xf8, 0xce, 0x6f, 0x0e, 0xd3, 0x55, 0xfe, 0x1c, 0xdf, 0xd2, 0xa0, 0x53, 0x99, 0xfc, 0x61,
	0xe8, 0xe9, 0x7f, 0x1b, 0xba, 0xe7, 0x0c, 0xed, 0x73, 0x45, 0xf1, 0x91, 0x2d, 0x5f, 0xb8, 0xea,
	0x13, 0xc2, 0x9d, 0x8b, 0xb4, 0x4a, 0x0b, 0xe5, 0x3f, 0xc0, 0xb8, 0x10, 0x0b, 0x9d, 0x18, 0xfb,
	0x85, 0x4b, 0x3b, 0xee, 0x9a, 0xce, 0xc4, 0x34, 0x7c, 0xc0, 0xbe, 0x84, 0xd9, 0x65, 0x9a, 0x49,
	0x9e, 0xb4, 0x1b, 0x53, 0xbd, 0x03, 0x6b, 0xb6, 0x4f, 0xdc, 0x4e, 0x49, 0xbb, 0x53, 0x32, 0x69,
	0x10, 0xe3, 0x47, 0x46, 0xf4, 0xae, 0x0e, 0xfb, 0x4e, 0xca, 0xdf, 0x14, 0xd1, 0xd5, 0xf7, 0x10,
	0xc5, 0xc7, 0xed, 0xa0, 0x7d, 0xa8, 0xce, 0x0f, 0xaf, 0x3e, 0x87, 0xde, 0x78, 0x7a, 0xbd, 0x09,
	0xd0, 0x7a, 0x13, 0xa0, 0x1f, 0x9b, 0x00, 0x7d, 0xd8, 0x06, 0xde, 0x7a, 0x1b, 0x78, 0x5f, 0xb7,
	0x81, 0xf7, 0x8a, 0xee, 0xc7, 0x30, 0x6a, 0x7f, 0x6b, 0x7b, 0xbe, 0xdb, 0xff, 0xb7, 0x36, 0x93,
	0xac, 0x63, 0xd5, 0x3d, 0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x81, 0x2a, 0x9c, 0xda, 0x02,
	0x00, 0x00,
}

func (m *DistrPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistrPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistrPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintYield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PotId) > 0 {
		i -= len(m.PotId)
		copy(dAtA[i:], m.PotId)
		i = encodeVarintYield(dAtA, i, uint64(len(m.PotId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolYield) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolYield) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolYield) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalWeight.Size()
		i -= size
		if _, err := m.TotalWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintYield(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DistributePools) > 0 {
		for iNdEx := len(m.DistributePools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributePools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYield(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockableDurations) > 0 {
		for iNdEx := len(m.LockableDurations) - 1; iNdEx >= 0; iNdEx-- {
			n, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockableDurations[iNdEx], dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockableDurations[iNdEx]):])
			if err != nil {
				return 0, err
			}
			i -= n
			i = encodeVarintYield(dAtA, i, uint64(n))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintYield(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintYield(dAtA []byte, offset int, v uint64) int {
	offset -= sovYield(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DistrPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PotId)
	if l > 0 {
		n += 1 + l + sovYield(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovYield(uint64(l))
	return n
}

func (m *PoolYield) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DistributePools) > 0 {
		for _, e := range m.DistributePools {
			l = e.Size()
			n += 1 + l + sovYield(uint64(l))
		}
	}
	l = m.TotalWeight.Size()
	n += 1 + l + sovYield(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovYield(uint64(l))
	}
	if len(m.LockableDurations) > 0 {
		for _, e := range m.LockableDurations {
			l = github_com_gogo_protobuf_types.SizeOfStdDuration(e)
			n += 1 + l + sovYield(uint64(l))
		}
	}
	return n
}

func sovYield(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYield(x uint64) (n int) {
	return sovYield(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DistrPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistrPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistrPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PotId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PotId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolYield) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolYield: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolYield: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributePools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributePools = append(m.DistributePools, DistrPool{})
			if err := m.DistributePools[len(m.DistributePools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYield
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYield
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockableDurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYield
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYield
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYield
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockableDurations = append(m.LockableDurations, time.Duration(0))
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&(m.LockableDurations[len(m.LockableDurations)-1]), dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYield(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYield
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYield
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYield(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYield
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYield
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYield
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYield
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYield
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYield
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYield        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYield          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYield = fmt.Errorf("proto: unexpected end of group")
)
