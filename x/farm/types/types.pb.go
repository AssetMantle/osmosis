// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/farm/v1beta1/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Farm struct {
	FarmId         uint64                                      `protobuf:"varint,1,opt,name=farmId,proto3" json:"farmId,omitempty" yaml:"farm_id"`
	TotalShare     github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,2,opt,name=totalShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"totalShare" yaml:"total_share"`
	CurrentPeriod  int64                                       `protobuf:"varint,3,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty" yaml:"current_period"`
	CurrentRewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=current_rewards,json=currentRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"current_rewards"`
	LastPeriod     int64                                       `protobuf:"varint,5,opt,name=last_period,json=lastPeriod,proto3" json:"last_period,omitempty" yaml:"last_period"`
}

func (m *Farm) Reset()         { *m = Farm{} }
func (m *Farm) String() string { return proto.CompactTextString(m) }
func (*Farm) ProtoMessage()    {}
func (*Farm) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2df01a0a5280ed, []int{0}
}
func (m *Farm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Farm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Farm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Farm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Farm.Merge(m, src)
}
func (m *Farm) XXX_Size() int {
	return m.Size()
}
func (m *Farm) XXX_DiscardUnknown() {
	xxx_messageInfo_Farm.DiscardUnknown(m)
}

var xxx_messageInfo_Farm proto.InternalMessageInfo

func (m *Farm) GetFarmId() uint64 {
	if m != nil {
		return m.FarmId
	}
	return 0
}

func (m *Farm) GetCurrentPeriod() int64 {
	if m != nil {
		return m.CurrentPeriod
	}
	return 0
}

func (m *Farm) GetCurrentRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.CurrentRewards
	}
	return nil
}

func (m *Farm) GetLastPeriod() int64 {
	if m != nil {
		return m.LastPeriod
	}
	return 0
}

// HistoricalRecord represents historical records for a fool.
// Height is implicit within the store key.
// Cumulative reward ratio is the sum from the zeroeth period.
type HistoricalRecord struct {
	CumulativeRewardRatio github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=cumulative_reward_ratio,json=cumulativeRewardRatio,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"cumulative_reward_ratio" yaml:"cumulative_reward_ratio"`
}

func (m *HistoricalRecord) Reset()         { *m = HistoricalRecord{} }
func (m *HistoricalRecord) String() string { return proto.CompactTextString(m) }
func (*HistoricalRecord) ProtoMessage()    {}
func (*HistoricalRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2df01a0a5280ed, []int{1}
}
func (m *HistoricalRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRecord.Merge(m, src)
}
func (m *HistoricalRecord) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRecord.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRecord proto.InternalMessageInfo

func (m *HistoricalRecord) GetCumulativeRewardRatio() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.CumulativeRewardRatio
	}
	return nil
}

type Farmer struct {
	FarmId              uint64                                 `protobuf:"varint,1,opt,name=farmId,proto3" json:"farmId,omitempty" yaml:"farm_id"`
	Address             string                                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Share               github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=share,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"share" yaml:"share"`
	LastWithdrawnPeriod int64                                  `protobuf:"varint,4,opt,name=last_withdrawn_period,json=lastWithdrawnPeriod,proto3" json:"last_withdrawn_period,omitempty" yaml:"last_withdrawn_period"`
}

func (m *Farmer) Reset()         { *m = Farmer{} }
func (m *Farmer) String() string { return proto.CompactTextString(m) }
func (*Farmer) ProtoMessage()    {}
func (*Farmer) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f2df01a0a5280ed, []int{2}
}
func (m *Farmer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Farmer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Farmer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Farmer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Farmer.Merge(m, src)
}
func (m *Farmer) XXX_Size() int {
	return m.Size()
}
func (m *Farmer) XXX_DiscardUnknown() {
	xxx_messageInfo_Farmer.DiscardUnknown(m)
}

var xxx_messageInfo_Farmer proto.InternalMessageInfo

func (m *Farmer) GetFarmId() uint64 {
	if m != nil {
		return m.FarmId
	}
	return 0
}

func (m *Farmer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Farmer) GetLastWithdrawnPeriod() int64 {
	if m != nil {
		return m.LastWithdrawnPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*Farm)(nil), "osmosis.farm.v1beta1.Farm")
	proto.RegisterType((*HistoricalRecord)(nil), "osmosis.farm.v1beta1.HistoricalRecord")
	proto.RegisterType((*Farmer)(nil), "osmosis.farm.v1beta1.Farmer")
}

func init() { proto.RegisterFile("osmosis/farm/v1beta1/types.proto", fileDescriptor_2f2df01a0a5280ed) }

var fileDescriptor_2f2df01a0a5280ed = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0xad, 0x69, 0x37, 0x34, 0x0f, 0x06, 0x32, 0x2b, 0x84, 0x69, 0x4a, 0xa2, 0x1c, 0x50, 0x01,
	0x2d, 0xd1, 0xd8, 0x01, 0x89, 0x03, 0x42, 0xd9, 0x84, 0xd8, 0x0d, 0x99, 0x21, 0x24, 0x2e, 0x95,
	0x1b, 0x9b, 0xd6, 0xa2, 0xa9, 0x2b, 0xdb, 0x5d, 0x19, 0x7f, 0x02, 0x7e, 0x07, 0xfc, 0x09, 0x8e,
	0x3b, 0xee, 0x88, 0x38, 0x04, 0xd4, 0xfe, 0x83, 0x1c, 0x39, 0x21, 0xdb, 0xc9, 0x56, 0x10, 0x87,
	0xf5, 0x94, 0xf8, 0xf3, 0xf3, 0xf3, 0x7b, 0xfe, 0xde, 0x07, 0x43, 0xa1, 0x72, 0xa1, 0xb8, 0x4a,
	0xde, 0x11, 0x99, 0x27, 0xc7, 0xbb, 0x3d, 0xa6, 0xc9, 0x6e, 0xa2, 0x4f, 0xc6, 0x4c, 0xc5, 0x63,
	0x29, 0xb4, 0x40, 0x9b, 0x15, 0x22, 0x36, 0x88, 0xb8, 0x42, 0x6c, 0x6d, 0xf6, 0x45, 0x5f, 0x58,
	0x40, 0x62, 0xfe, 0x1c, 0x76, 0xcb, 0xcf, 0x2c, 0x38, 0xe9, 0x11, 0xc5, 0xce, 0xc9, 0x32, 0xc1,
	0x47, 0x6e, 0x3f, 0xfa, 0xd4, 0x84, 0xad, 0xe7, 0x44, 0xe6, 0xe8, 0x01, 0x5c, 0x35, 0x74, 0x87,
	0xd4, 0x03, 0x21, 0xe8, 0xb4, 0x52, 0x54, 0x16, 0xc1, 0xc6, 0x09, 0xc9, 0x87, 0x4f, 0x22, 0x53,
	0xef, 0x72, 0x1a, 0xe1, 0x0a, 0x81, 0x28, 0x84, 0x5a, 0x68, 0x32, 0x7c, 0x35, 0x20, 0x92, 0x79,
	0x57, 0x42, 0xd0, 0x59, 0x4b, 0x0f, 0x4e, 0x8b, 0xa0, 0xf1, 0xa3, 0x08, 0xee, 0xf5, 0xb9, 0x1e,
	0x4c, 0x7a, 0x71, 0x26, 0xf2, 0xa4, 0xba, 0xdb, 0x7d, 0x76, 0x14, 0x7d, 0x5f, 0xd9, 0x38, 0x1c,
	0xe9, 0xb2, 0x08, 0x90, 0x63, 0xb7, 0x4c, 0x5d, 0x65, 0xa8, 0x22, 0xbc, 0xc0, 0x8b, 0x9e, 0xc1,
	0x8d, 0x6c, 0x22, 0x25, 0x1b, 0xe9, 0xee, 0x98, 0x49, 0x2e, 0xa8, 0xd7, 0x0c, 0x41, 0xa7, 0x99,
	0xde, 0x2d, 0x8b, 0xa0, 0xed, 0xce, 0xfe, 0xbd, 0x1f, 0xe1, 0xeb, 0x55, 0xe1, 0xa5, 0x5d, 0xa3,
	0x8f, 0xf0, 0x46, 0x8d, 0x90, 0x6c, 0x4a, 0x24, 0x55, 0x5e, 0x2b, 0x6c, 0x76, 0xd6, 0x1f, 0x6d,
	0xc7, 0x4e, 0x53, 0x6c, 0x9e, 0xa5, 0x7e, 0xc1, 0xf8, 0x80, 0x65, 0xfb, 0x82, 0x8f, 0xd2, 0x3d,
	0x63, 0xe5, 0xcb, 0xcf, 0xe0, 0xe1, 0x25, 0xac, 0x54, 0x67, 0x14, 0xae, 0xb5, 0x62, 0x77, 0x11,
	0x7a, 0x0c, 0xd7, 0x87, 0x44, 0x9d, 0x4b, 0x5f, 0xb1, 0xd2, 0x6f, 0x5f, 0xd8, 0x5e, 0xd8, 0x8c,
	0x30, 0x34, 0x2b, 0x27, 0x3a, 0xfa, 0x06, 0xe0, 0xcd, 0x17, 0x5c, 0x69, 0x21, 0x79, 0x46, 0x86,
	0x98, 0x65, 0x42, 0x52, 0xf4, 0x15, 0xc0, 0x3b, 0xd9, 0x24, 0x9f, 0x0c, 0x89, 0xe6, 0xc7, 0xac,
	0x72, 0xd3, 0x95, 0x44, 0x73, 0xe1, 0x81, 0x4b, 0x58, 0x7a, 0x6d, 0x2c, 0x95, 0x45, 0xe0, 0xd7,
	0xef, 0xf6, 0x5f, 0xaa, 0x68, 0x59, 0xd3, 0xed, 0x0b, 0x22, 0xe7, 0x1b, 0x5b, 0x9a, 0xdf, 0x00,
	0xae, 0x9a, 0x50, 0x31, 0xb9, 0x54, 0xac, 0x3c, 0x78, 0x95, 0x50, 0x2a, 0x99, 0x52, 0x2e, 0x53,
	0xb8, 0x5e, 0xa2, 0x23, 0xb8, 0x62, 0x03, 0x62, 0x13, 0xb0, 0x96, 0x3e, 0x5d, 0x3a, 0x6b, 0xd7,
	0xdc, 0x95, 0x55, 0xca, 0x1c, 0x19, 0x3a, 0x82, 0x6d, 0xdb, 0x85, 0x29, 0xd7, 0x03, 0x2a, 0xc9,
	0x74, 0x54, 0x37, 0xab, 0x65, 0x9b, 0x15, 0x96, 0x45, 0xb0, 0xbd, 0xd0, 0xac, 0x7f, 0x61, 0x11,
	0xbe, 0x65, 0xea, 0x6f, 0xea, 0xb2, 0xeb, 0x5f, 0xba, 0x7f, 0x3a, 0xf3, 0xc1, 0xd9, 0xcc, 0x07,
	0xbf, 0x66, 0x3e, 0xf8, 0x3c, 0xf7, 0x1b, 0x67, 0x73, 0xbf, 0xf1, 0x7d, 0xee, 0x37, 0xde, 0xde,
	0x5f, 0x94, 0xbb, 0x53, 0x8f, 0x79, 0xfd, 0xfd, 0xe0, 0x06, 0xde, 0xaa, 0xee, 0xad, 0xda, 0xe9,
	0xdc, 0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xef, 0x98, 0x21, 0x0d, 0x04, 0x00, 0x00,
}

func (m *Farm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Farm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Farm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastPeriod))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CurrentRewards) > 0 {
		for iNdEx := len(m.CurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.CurrentPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentPeriod))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.TotalShare.Size()
		i -= size
		if _, err := m.TotalShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.FarmId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FarmId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativeRewardRatio) > 0 {
		for iNdEx := len(m.CumulativeRewardRatio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardRatio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Farmer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Farmer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Farmer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastWithdrawnPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastWithdrawnPeriod))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Share.Size()
		i -= size
		if _, err := m.Share.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.FarmId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FarmId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Farm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FarmId != 0 {
		n += 1 + sovTypes(uint64(m.FarmId))
	}
	l = m.TotalShare.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.CurrentPeriod != 0 {
		n += 1 + sovTypes(uint64(m.CurrentPeriod))
	}
	if len(m.CurrentRewards) > 0 {
		for _, e := range m.CurrentRewards {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.LastPeriod != 0 {
		n += 1 + sovTypes(uint64(m.LastPeriod))
	}
	return n
}

func (m *HistoricalRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardRatio) > 0 {
		for _, e := range m.CumulativeRewardRatio {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *Farmer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FarmId != 0 {
		n += 1 + sovTypes(uint64(m.FarmId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Share.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.LastWithdrawnPeriod != 0 {
		n += 1 + sovTypes(uint64(m.LastWithdrawnPeriod))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Farm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Farm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Farm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmId", wireType)
			}
			m.FarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPeriod", wireType)
			}
			m.CurrentPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRewards = append(m.CurrentRewards, types.DecCoin{})
			if err := m.CurrentRewards[len(m.CurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPeriod", wireType)
			}
			m.LastPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardRatio = append(m.CumulativeRewardRatio, types.DecCoin{})
			if err := m.CumulativeRewardRatio[len(m.CumulativeRewardRatio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Farmer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Farmer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Farmer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmId", wireType)
			}
			m.FarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawnPeriod", wireType)
			}
			m.LastWithdrawnPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawnPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
