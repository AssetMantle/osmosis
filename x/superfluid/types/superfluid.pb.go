// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/superfluid/superfluid.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SuperfluidAssetType int32

const (
	// TODO: what superfluid asset types will be here?
	SuperfluidAssetTypeNative  SuperfluidAssetType = 0
	SuperfluidAssetTypeLPShare SuperfluidAssetType = 1
)

var SuperfluidAssetType_name = map[int32]string{
	0: "SuperfluidAssetTypeNative",
	1: "SuperfluidAssetTypeLPShare",
}

var SuperfluidAssetType_value = map[string]int32{
	"SuperfluidAssetTypeNative":  0,
	"SuperfluidAssetTypeLPShare": 1,
}

func (x SuperfluidAssetType) String() string {
	return proto.EnumName(SuperfluidAssetType_name, int32(x))
}

func (SuperfluidAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{0}
}

// SuperfluidAsset stores the pair of superfluid asset type and denom pair
type SuperfluidAsset struct {
	AssetType SuperfluidAssetType `protobuf:"varint,1,opt,name=asset_type,json=assetType,proto3,enum=osmosis.superfluid.SuperfluidAssetType" json:"asset_type,omitempty"`
	Denom     string              `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *SuperfluidAsset) Reset()         { *m = SuperfluidAsset{} }
func (m *SuperfluidAsset) String() string { return proto.CompactTextString(m) }
func (*SuperfluidAsset) ProtoMessage()    {}
func (*SuperfluidAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{0}
}
func (m *SuperfluidAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidAsset.Merge(m, src)
}
func (m *SuperfluidAsset) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidAsset.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidAsset proto.InternalMessageInfo

// SuperfluidAssetInfo stores the information of superfluid asset - real time changes
type SuperfluidAssetInfo struct {
	SuperfluidAssetId          uint64                                 `protobuf:"varint,1,opt,name=superfluid_asset_id,json=superfluidAssetId,proto3" json:"superfluid_asset_id,omitempty"`
	TotalStakedAmount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=total_staked_amount,json=totalStakedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_staked_amount" yaml:"superfluid_staked_amount"`
	RiskAdjustedOsmoEquivalent github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=risk_adjusted_osmo_equivalent,json=riskAdjustedOsmoEquivalent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"risk_adjusted_osmo_equivalent" yaml:"risk_adjusted_osmo_equivalent"`
}

func (m *SuperfluidAssetInfo) Reset()         { *m = SuperfluidAssetInfo{} }
func (m *SuperfluidAssetInfo) String() string { return proto.CompactTextString(m) }
func (*SuperfluidAssetInfo) ProtoMessage()    {}
func (*SuperfluidAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{1}
}
func (m *SuperfluidAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidAssetInfo.Merge(m, src)
}
func (m *SuperfluidAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidAssetInfo proto.InternalMessageInfo

func (m *SuperfluidAssetInfo) GetSuperfluidAssetId() uint64 {
	if m != nil {
		return m.SuperfluidAssetId
	}
	return 0
}

func init() {
	proto.RegisterEnum("osmosis.superfluid.SuperfluidAssetType", SuperfluidAssetType_name, SuperfluidAssetType_value)
	proto.RegisterType((*SuperfluidAsset)(nil), "osmosis.superfluid.SuperfluidAsset")
	proto.RegisterType((*SuperfluidAssetInfo)(nil), "osmosis.superfluid.SuperfluidAssetInfo")
}

func init() {
	proto.RegisterFile("osmosis/superfluid/superfluid.proto", fileDescriptor_79d3c29d82dbb734)
}

var fileDescriptor_79d3c29d82dbb734 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0xa5, 0x20, 0x7a, 0x03, 0xb4, 0x4e, 0x87, 0x60, 0xa9, 0xe7, 0xca, 0x20, 0xa8,
	0x90, 0xea, 0x53, 0xcb, 0xd6, 0x2d, 0x95, 0x40, 0xaa, 0x54, 0xf1, 0xc3, 0x41, 0x0c, 0x5d, 0xac,
	0x73, 0xee, 0xe2, 0x1e, 0xb1, 0x7d, 0xc6, 0xf7, 0x1c, 0x91, 0x91, 0xad, 0x23, 0x2b, 0x5b, 0x25,
	0xfe, 0x99, 0x8e, 0x1d, 0x11, 0x43, 0x84, 0x12, 0x21, 0x31, 0xf3, 0x17, 0x20, 0x9f, 0x9d, 0x36,
	0xa4, 0x11, 0x12, 0x93, 0xdf, 0x7b, 0xdf, 0xbb, 0xef, 0xfb, 0xbc, 0xf3, 0x1d, 0x7e, 0xa8, 0x74,
	0xaa, 0xb4, 0xd4, 0x54, 0x97, 0xb9, 0x28, 0xfa, 0x49, 0x29, 0xf9, 0x5c, 0xe8, 0xe7, 0x85, 0x02,
	0x65, 0xdb, 0xcd, 0x22, 0xff, 0x5a, 0x71, 0x36, 0x63, 0x15, 0x2b, 0x23, 0xd3, 0x2a, 0xaa, 0x57,
	0x3a, 0x24, 0x56, 0x2a, 0x4e, 0x04, 0x35, 0x59, 0x54, 0xf6, 0x29, 0x2f, 0x0b, 0x06, 0x52, 0x65,
	0x8d, 0xee, 0x2e, 0xea, 0x20, 0x53, 0xa1, 0x81, 0xa5, 0xf9, 0xcc, 0xa0, 0x67, 0x7a, 0xd1, 0x88,
	0x69, 0x41, 0x87, 0x7b, 0x91, 0x00, 0xb6, 0x47, 0x7b, 0x4a, 0x36, 0x06, 0xde, 0x08, 0xdf, 0xef,
	0x5e, 0x41, 0x74, 0xb4, 0x16, 0x60, 0xbf, 0xc0, 0x98, 0x55, 0x41, 0x08, 0xa3, 0x5c, 0xb4, 0xd1,
	0x36, 0xda, 0xb9, 0xb7, 0xff, 0xc4, 0xbf, 0x89, 0xec, 0x2f, 0x6c, 0x7c, 0x3b, 0xca, 0x45, 0xb0,
	0xc6, 0x66, 0xa1, 0xbd, 0x89, 0x6f, 0x73, 0x91, 0xa9, 0xb4, 0xbd, 0xb2, 0x8d, 0x76, 0xd6, 0x82,
	0x3a, 0x39, 0xb8, 0x7b, 0x76, 0xee, 0x5a, 0xbf, 0xce, 0x5d, 0xe4, 0xfd, 0x5c, 0xc1, 0xad, 0x05,
	0x8b, 0xa3, 0xac, 0xaf, 0x6c, 0x1f, 0xb7, 0xae, 0x9b, 0x84, 0x35, 0x8a, 0xe4, 0x06, 0x64, 0x35,
	0xd8, 0xd0, 0x0b, 0x3b, 0xb8, 0xfd, 0x09, 0xe1, 0x16, 0x28, 0x60, 0x49, 0xa8, 0x81, 0x0d, 0x04,
	0x0f, 0x59, 0xaa, 0xca, 0x0c, 0xea, 0xb6, 0x87, 0x6f, 0x2e, 0xc6, 0xae, 0xf5, 0x7d, 0xec, 0x3e,
	0x8e, 0x25, 0x9c, 0x96, 0x91, 0xdf, 0x53, 0x29, 0x6d, 0xce, 0xa4, 0xfe, 0xec, 0x6a, 0x3e, 0xa0,
	0xd5, 0xa8, 0xda, 0x3f, 0xca, 0xe0, 0xf7, 0xd8, 0x75, 0x47, 0x2c, 0x4d, 0x0e, 0xbc, 0x39, 0x86,
	0xbf, 0x7c, 0xbd, 0x60, 0xc3, 0x74, 0xeb, 0x9a, 0x62, 0xc7, 0xd4, 0xec, 0x2f, 0x08, 0x6f, 0x15,
	0x52, 0x0f, 0x42, 0xc6, 0xdf, 0x97, 0x1a, 0x04, 0x0f, 0x2b, 0xef, 0x50, 0x7c, 0x28, 0xe5, 0x90,
	0x25, 0x22, 0x83, 0xf6, 0x2d, 0x43, 0xf3, 0xee, 0xbf, 0x69, 0x1e, 0xd5, 0x34, 0xff, 0x34, 0xf7,
	0x02, 0xa7, 0xd2, 0x3b, 0x8d, 0xfc, 0x4a, 0xa7, 0xea, 0xf9, 0x95, 0xf8, 0xf4, 0xe4, 0xc6, 0x31,
	0x9b, 0xdf, 0xb3, 0x85, 0x1f, 0x2c, 0x29, 0xbf, 0x64, 0x20, 0x87, 0x62, 0xdd, 0xb2, 0x09, 0x76,
	0x96, 0xc8, 0xc7, 0xaf, 0xbb, 0xa7, 0xac, 0x10, 0xeb, 0xc8, 0x59, 0x3d, 0xfb, 0x4a, 0xac, 0xc3,
	0xe3, 0x8b, 0x09, 0x41, 0x97, 0x13, 0x82, 0x7e, 0x4c, 0x08, 0xfa, 0x3c, 0x25, 0xd6, 0xe5, 0x94,
	0x58, 0xdf, 0xa6, 0xc4, 0x3a, 0xd9, 0x9f, 0x9b, 0xb0, 0xb9, 0x3b, 0xbb, 0x09, 0x8b, 0xf4, 0x2c,
	0xa1, 0x1f, 0xe7, 0x9f, 0x88, 0x99, 0x38, 0xba, 0x63, 0xee, 0xe4, 0xb3, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0xdb, 0x90, 0x56, 0x45, 0x03, 0x00, 0x00,
}

func (this *SuperfluidAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperfluidAsset)
	if !ok {
		that2, ok := that.(SuperfluidAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssetType != that1.AssetType {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	return true
}
func (m *SuperfluidAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.AssetType != 0 {
		i = encodeVarintSuperfluid(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RiskAdjustedOsmoEquivalent.Size()
		i -= size
		if _, err := m.RiskAdjustedOsmoEquivalent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSuperfluid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalStakedAmount.Size()
		i -= size
		if _, err := m.TotalStakedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSuperfluid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.SuperfluidAssetId != 0 {
		i = encodeVarintSuperfluid(dAtA, i, uint64(m.SuperfluidAssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSuperfluid(dAtA []byte, offset int, v uint64) int {
	offset -= sovSuperfluid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SuperfluidAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetType != 0 {
		n += 1 + sovSuperfluid(uint64(m.AssetType))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	return n
}

func (m *SuperfluidAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SuperfluidAssetId != 0 {
		n += 1 + sovSuperfluid(uint64(m.SuperfluidAssetId))
	}
	l = m.TotalStakedAmount.Size()
	n += 1 + l + sovSuperfluid(uint64(l))
	l = m.RiskAdjustedOsmoEquivalent.Size()
	n += 1 + l + sovSuperfluid(uint64(l))
	return n
}

func sovSuperfluid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSuperfluid(x uint64) (n int) {
	return sovSuperfluid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SuperfluidAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= SuperfluidAssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperfluidAssetId", wireType)
			}
			m.SuperfluidAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperfluidAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RiskAdjustedOsmoEquivalent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RiskAdjustedOsmoEquivalent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSuperfluid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSuperfluid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSuperfluid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSuperfluid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSuperfluid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSuperfluid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSuperfluid = fmt.Errorf("proto: unexpected end of group")
)
