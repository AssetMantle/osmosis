syntax = "proto3";
package osmosis.superfluid;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/x/superfluid/types";

enum SuperfluidAssetType {
  option (gogoproto.goproto_enum_prefix) = false;

  // TODO: what superfluid asset types will be here?
  SuperfluidAssetTypeNative = 0;
  SuperfluidAssetTypeLPShare = 1;
  // SuperfluidAssetTypeLendingShare = 2; // for now not exist
}

// SuperfluidAsset stores the pair of superfluid asset type and denom pair
message SuperfluidAsset {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  SuperfluidAssetType asset_type = 1;
  string denom = 2;
}

// SuperfluidAssetInfo stores the information of superfluid asset - real time changes
message SuperfluidAssetInfo {
  uint64 superfluid_asset_id = 1;
  string total_staked_amount = 2 [ 
    (gogoproto.moretags) = "yaml:\"superfluid_staked_amount\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string risk_adjusted_osmo_equivalent = 3 [
    (gogoproto.moretags) = "yaml:\"risk_adjusted_osmo_equivalent\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
